'use client';

import {
  Chart as ChartJS,
  LineController,
  LinearScale,
  TimeScale,
  LineElement,
  PointElement,
  Tooltip
} from 'chart.js';
import 'chartjs-adapter-moment';
import { Line } from 'react-chartjs-2';
import { useState } from 'react';
import { WeatherGraphProps } from '../utils/get-weather';

ChartJS.register(
  LineController,
  LineElement,
  PointElement,
  LinearScale,
  TimeScale,
  Tooltip
);

export const chartOptions = {
  maintainAspectRatio: false,
  scales: {
    x: {
      type: 'time',
      time: {
        tooltipFormat: 'dddd ha',
        displayFormats: {
          day: 'dddd'
        }
      },
      grid: {
        display: false
      },
      ticks: {
        autoSkip: false,
        maxRotation: 0,
        major: {
          enabled: true
        },
        font: (context: any) => {
          if (context.tick && context.tick.major) {
            return {
              weight: 'bold'
            };
          }
        }
      }
    },
    y: {
      ticks: {
        callback: (value: number) => {
          return value + '°F';
        }
      }
    }
  },
  plugins: {
    legend: {
      display: false
    },
    tooltip: {
      callbacks: {
        label: (context: any) => {
          return context.raw.y + '°F';
        }
      }
    }
  }
};

export default function WeatherHourlyChart({ chartPoints }: WeatherGraphProps) {
  const [data, setData] = useState({
    type: 'line',
    datasets: [
      {
        backgroundColor: '#000',
        borderColor: '#000',
        pointRadius: 2,
        data: [
          { x: '2023-07-28T00:00:00-07:00', y: 64 },
          { x: '2023-07-28T01:00:00-07:00', y: 62 },
          { x: '2023-07-28T02:00:00-07:00', y: 61 },
          { x: '2023-07-28T03:00:00-07:00', y: 59 },
          { x: '2023-07-28T04:00:00-07:00', y: 59 },
          { x: '2023-07-28T05:00:00-07:00', y: 58 },
          { x: '2023-07-28T06:00:00-07:00', y: 57 },
          { x: '2023-07-28T07:00:00-07:00', y: 58 },
          { x: '2023-07-28T08:00:00-07:00', y: 61 },
          { x: '2023-07-28T09:00:00-07:00', y: 64 },
          { x: '2023-07-28T10:00:00-07:00', y: 71 },
          { x: '2023-07-28T11:00:00-07:00', y: 76 },
          { x: '2023-07-28T12:00:00-07:00', y: 80 },
          { x: '2023-07-28T13:00:00-07:00', y: 85 },
          { x: '2023-07-28T14:00:00-07:00', y: 88 },
          { x: '2023-07-28T15:00:00-07:00', y: 88 },
          { x: '2023-07-28T16:00:00-07:00', y: 90 },
          { x: '2023-07-28T17:00:00-07:00', y: 89 },
          { x: '2023-07-28T18:00:00-07:00', y: 88 },
          { x: '2023-07-28T19:00:00-07:00', y: 84 },
          { x: '2023-07-28T20:00:00-07:00', y: 78 },
          { x: '2023-07-28T21:00:00-07:00', y: 73 },
          { x: '2023-07-28T22:00:00-07:00', y: 69 },
          { x: '2023-07-28T23:00:00-07:00', y: 66 },
          { x: '2023-07-29T00:00:00-07:00', y: 63 },
          { x: '2023-07-29T01:00:00-07:00', y: 62 },
          { x: '2023-07-29T02:00:00-07:00', y: 60 },
          { x: '2023-07-29T03:00:00-07:00', y: 59 },
          { x: '2023-07-29T04:00:00-07:00', y: 58 },
          { x: '2023-07-29T05:00:00-07:00', y: 57 },
          { x: '2023-07-29T06:00:00-07:00', y: 57 },
          { x: '2023-07-29T07:00:00-07:00', y: 59 },
          { x: '2023-07-29T08:00:00-07:00', y: 61 },
          { x: '2023-07-29T09:00:00-07:00', y: 65 },
          { x: '2023-07-29T10:00:00-07:00', y: 71 },
          { x: '2023-07-29T11:00:00-07:00', y: 76 },
          { x: '2023-07-29T12:00:00-07:00', y: 81 },
          { x: '2023-07-29T13:00:00-07:00', y: 86 },
          { x: '2023-07-29T14:00:00-07:00', y: 90 },
          { x: '2023-07-29T15:00:00-07:00', y: 92 },
          { x: '2023-07-29T16:00:00-07:00', y: 93 },
          { x: '2023-07-29T17:00:00-07:00', y: 93 },
          { x: '2023-07-29T18:00:00-07:00', y: 91 },
          { x: '2023-07-29T19:00:00-07:00', y: 87 },
          { x: '2023-07-29T20:00:00-07:00', y: 82 },
          { x: '2023-07-29T21:00:00-07:00', y: 77 },
          { x: '2023-07-29T22:00:00-07:00', y: 72 },
          { x: '2023-07-29T23:00:00-07:00', y: 67 },
          { x: '2023-07-30T00:00:00-07:00', y: 64 },
          { x: '2023-07-30T01:00:00-07:00', y: 62 },
          { x: '2023-07-30T02:00:00-07:00', y: 61 },
          { x: '2023-07-30T03:00:00-07:00', y: 59 },
          { x: '2023-07-30T04:00:00-07:00', y: 58 },
          { x: '2023-07-30T05:00:00-07:00', y: 57 },
          { x: '2023-07-30T06:00:00-07:00', y: 57 },
          { x: '2023-07-30T07:00:00-07:00', y: 58 },
          { x: '2023-07-30T08:00:00-07:00', y: 61 },
          { x: '2023-07-30T09:00:00-07:00', y: 66 },
          { x: '2023-07-30T10:00:00-07:00', y: 71 },
          { x: '2023-07-30T11:00:00-07:00', y: 77 },
          { x: '2023-07-30T12:00:00-07:00', y: 82 },
          { x: '2023-07-30T13:00:00-07:00', y: 87 },
          { x: '2023-07-30T14:00:00-07:00', y: 91 },
          { x: '2023-07-30T15:00:00-07:00', y: 94 },
          { x: '2023-07-30T16:00:00-07:00', y: 95 },
          { x: '2023-07-30T17:00:00-07:00', y: 95 },
          { x: '2023-07-30T18:00:00-07:00', y: 93 },
          { x: '2023-07-30T19:00:00-07:00', y: 90 },
          { x: '2023-07-30T20:00:00-07:00', y: 85 },
          { x: '2023-07-30T21:00:00-07:00', y: 80 },
          { x: '2023-07-30T22:00:00-07:00', y: 75 },
          { x: '2023-07-30T23:00:00-07:00', y: 70 }
        ]
      }
    ]
  });

  return (
    <div
      className="mx-auto max-w-4xl px-6 py-6 md:px-8 md:py-8 bg-gray-200"
      style={{ height: '60vh' }}
    >
      <Line data={data} options={chartOptions} />
    </div>
  );
}
